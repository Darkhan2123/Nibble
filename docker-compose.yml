version: '3.8'

services:
  # Database Services
  postgres:
    image: postgis/postgis:15-3.3
    container_name: ubereats_postgres
    environment:
      POSTGRES_USER: ubereats
      POSTGRES_PASSWORD: ubereats_password
      POSTGRES_DB: ubereats
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ubereats"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ubereats_network

  redis:
    image: redis:7
    container_name: ubereats_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --protected-mode no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ubereats_network

  # Kafka and ZooKeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: ubereats_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - ubereats_network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: ubereats_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - ubereats_network

  # Apache Pinot for Analytics
  pinot-controller:
    image: apachepinot/pinot:0.12.0
    container_name: ubereats_pinot_controller
    command: "StartController -configFileName /config/controller-config.conf"
    ports:
      - "9000:9000"
    volumes:
      - ./infrastructure/pinot/config:/config
      - pinot_controller_data:/data
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - ubereats_network

  pinot-broker:
    image: apachepinot/pinot:0.12.0
    container_name: ubereats_pinot_broker
    command: "StartBroker -configFileName /config/broker-config.conf"
    ports:
      - "8099:8099"
    depends_on:
      - pinot-controller
      - zookeeper
    volumes:
      - ./infrastructure/pinot/config:/config
    networks:
      - ubereats_network

  pinot-server:
    image: apachepinot/pinot:0.12.0
    container_name: ubereats_pinot_server
    command: "StartServer -configFileName /config/server-config.conf"
    depends_on:
      - pinot-controller
      - zookeeper
    volumes:
      - ./infrastructure/pinot/config:/config
      - pinot_server_data:/data
    networks:
      - ubereats_network

  # Microservices
  user-service:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    container_name: user-service
    hostname: user-service
    environment:
      - DATABASE_URL=postgresql://ubereats:ubereats_password@postgres:5432/ubereats
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_NAME=user-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: on-failure
    ports:
      - "8001:8000"
    networks:
      ubereats_network:
        aliases:
          - user-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  restaurant-service:
    build:
      context: ./services/restaurant
      dockerfile: Dockerfile
    container_name: restaurant-service
    hostname: restaurant-service
    environment:
      - DATABASE_URL=postgresql://ubereats:ubereats_password@postgres:5432/ubereats
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_NAME=restaurant-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8002:8000"
    networks:
      ubereats_network:
        aliases:
          - restaurant-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  driver-service:
    build:
      context: ./services/driver
      dockerfile: Dockerfile
    container_name: driver-service
    hostname: driver-service
    environment:
      - DATABASE_URL=postgresql://ubereats:ubereats_password@postgres:5432/ubereats
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_NAME=driver-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - YANDEX_MAP_API_KEY=4187db56-ead5-458f-85c4-f6483ae62c1a
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8003:8000"
    networks:
      ubereats_network:
        aliases:
          - driver-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  order-service:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order-service
    hostname: order-service
    environment:
      - DATABASE_URL=postgresql://ubereats:ubereats_password@postgres:5432/ubereats
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_NAME=order-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8004:8000"
    networks:
      ubereats_network:
        aliases:
          - order-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  admin-service:
    build:
      context: ./services/admin
      dockerfile: Dockerfile
    container_name: admin-service
    hostname: admin-service
    environment:
      - DATABASE_URL=postgresql://ubereats:ubereats_password@postgres:5432/ubereats
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_NAME=admin-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8005:8000"
    networks:
      ubereats_network:
        aliases:
          - admin-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: ubereats_notification_service
    environment:
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SERVICE_NAME=notification-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      - redis
      - kafka
    networks:
      - ubereats_network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  analytics-service:
    build:
      context: ./services/analytics
      dockerfile: Dockerfile
    container_name: analytics-service
    hostname: analytics-service
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - PINOT_CONTROLLER=pinot-controller:9000
      - SERVICE_NAME=analytics-service
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      - kafka
      - pinot-controller
      - pinot-broker
      - pinot-server
    ports:
      - "8006:8000"
    networks:
      ubereats_network:
        aliases:
          - analytics-service
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    hostname: api-gateway
    environment:
      - USER_SERVICE_URL=http://user-service:8000
      - RESTAURANT_SERVICE_URL=http://restaurant-service:8000
      - DRIVER_SERVICE_URL=http://driver-service:8000
      - ORDER_SERVICE_URL=http://order-service:8000
      - ADMIN_SERVICE_URL=http://admin-service:8000
      - ANALYTICS_SERVICE_URL=http://analytics-service:8000
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET=your_jwt_secret_should_be_changed_in_production
      - ENVIRONMENT=development
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
      restaurant-service:
        condition: service_started
      driver-service:
        condition: service_started
      order-service:
        condition: service_started
      admin-service:
        condition: service_started
      analytics-service:
        condition: service_started
    restart: always
    ports:
      - "8000:8000"
    networks:
      ubereats_network:
        aliases:
          - api-gateway
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  ubereats_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pinot_controller_data:
  pinot_server_data: